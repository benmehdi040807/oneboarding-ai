datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(cuid())
  name             String?
  email            String?  @unique
  emailVerified    DateTime?
  image            String?
  plan             String   @default("free") // "free" | "pro" | "team"
  stripeCustomerId String?  @unique
  profile          Profile?
  histories        History[]
  accounts         Account[]
  sessions         Session[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String?
  title     String?
  org       String?
  locale    String   @default("fr")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model History {
  id          String   @id @default(cuid())
  userId      String
  plan        String
  templateId  String
  inputJson   String   // JSON stringifié
  outputText  String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  locale    String   @default("fr")
  config    String   // JSON stringifié
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
