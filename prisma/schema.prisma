// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // ex: postgresql://user:pass@host:5432/dbname?sslmode=require
}

generator client {
  provider = "prisma-client-js"
}

/* =========================
   Utilisateurs
   ========================= */
model User {
  id         String   @id @default(cuid())
  phoneE164  String   @unique
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @updatedAt @db.Timestamptz

  profile        Profile?
  subscriptions  Subscription[]
  histories      History[]
  devices        Device[]
  sessions       Session[]
  deviceIntents  DeviceOrderIntent[]

  @@index([createdAt])
}

/* =========================
   Abonnements (PayPal)
   ========================= */
model Subscription {
  id                String    @id @default(cuid())
  userId            String
  paypalId          String    @unique
  // plan/status en STRING (compat & flex)
  plan              String    @default("CONTINU")    // "CONTINU" | "PASS1MOIS"
  status            String    @default("ACTIVE")     // "APPROVAL_PENDING" | "APPROVED" | "ACTIVE" | "SUSPENDED" | "CANCELLED" | "EXPIRED"
  currentPeriodEnd  DateTime? @db.Timestamptz
  cancelAtPeriodEnd Boolean   @default(false)
  createdAt         DateTime  @default(now()) @db.Timestamptz
  updatedAt         DateTime  @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([paypalId])
  @@index([status])
  @@index([createdAt])
}

/* =========================
   Profil
   ========================= */
model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String?
  title     String?
  org       String?
  locale    String   @default("fr")
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/* =========================
   Historique (journal libre)
   ========================= */
model History {
  id          String   @id @default(cuid())
  userId      String
  plan        String
  templateId  String
  inputJson   String
  outputText  String
  createdAt   DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

/* =========================
   Templates (moteur interne)
   ========================= */
model Template {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  locale    String   @default("fr")
  config    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@index([locale])
  @@index([isActive])
}

/* =========================
   Appareils (multi-device)
   =========================
   - authorized: true/false (préféré à la suppression)
   - revokedAt: timestamp si désactivé manuellement
   - lastSeenAt: pour housekeeping
   - (userId, deviceId) unique
*/
model Device {
  id         String   @id @default(cuid())
  userId     String
  deviceId   String
  label      String?          // ex: "iPhone 15", "Pixel 8"
  userAgent  String?
  platform   String?          // ex: "iOS", "Android", "Web"
  authorized Boolean  @default(false)
  revokedAt  DateTime? @db.Timestamptz
  lastSeenAt DateTime? @db.Timestamptz
  createdAt  DateTime  @default(now()) @db.Timestamptz
  updatedAt  DateTime  @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([userId, authorized])
  @@index([updatedAt])
}

/* =========================
   Sessions opaques (DB)
   =========================
   - Pas de secret côté client requis
   - expiresAt: invalidation automatique
   - revokedAt: logout / rotation
*/
model Session {
  id         String   @id @default(cuid())
  userId     String
  deviceId   String?        // facultatif: session liée à un device
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @updatedAt @db.Timestamptz
  expiresAt  DateTime @db.Timestamptz
  revokedAt  DateTime? @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
}

/* =========================
   Intent de paiement "1€" (device)
   =========================
   - orderId PayPal unique
   - status libre ("CREATED"|"APPROVED"|"CAPTURED"|...)
   - payload: JSON brut PayPal si tu veux conserver les traces
*/
model DeviceOrderIntent {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String
  orderId     String   @unique
  amount      String   @default("1.00")
  currency    String   @default("EUR")
  status      String   @default("CREATED")
  payload     String?
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
  completedAt DateTime? @db.Timestamptz
  cancelledAt DateTime? @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceId])
  @@index([status])
  @@index([createdAt])
}
