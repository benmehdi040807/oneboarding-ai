// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // ex: postgresql://user:pass@host:5432/dbname?sslmode=require
}

generator client {
  provider = "prisma-client-js"
}

// =========================
//    Utilisateurs
// =========================
// phoneE164 = identifiant contractuel unique (E.164)
// consentAt = horodatage du "Lu et approuvé" (consentement numérique souverain)
// -> conforme au Protocole Benmehdi : consentement traçable et opposable
model User {
  id         String    @id @default(cuid())
  phoneE164  String    @unique
  consentAt  DateTime? @db.Timestamptz // timestamp du consentement enregistré
  createdAt  DateTime  @default(now()) @db.Timestamptz
  updatedAt  DateTime  @updatedAt @db.Timestamptz

  profile        Profile?
  subscriptions  Subscription[]
  histories      History[]
  devices        Device[]
  sessions       Session[]
  deviceIntents  DeviceOrderIntent[]

  @@index([createdAt])
}

// =========================
//    Abonnements (PayPal)
// =========================
// plan/status en STRING (compat & flex)
// currentPeriodEnd : fin de période courante
// cancelAtPeriodEnd : résiliation programmée en fin de période
// cancelledAt : date de résiliation effective décidée (ex nunc)
model Subscription {
  id                String    @id @default(cuid())
  userId            String
  paypalId          String    @unique
  plan              String    @default("CONTINU")    // "CONTINU" | "PASS1MOIS"
  status            String    @default("ACTIVE")     // "APPROVAL_PENDING" | "APPROVED" | "ACTIVE" | "SUSPENDED" | "CANCELLED" | "EXPIRED"
  currentPeriodEnd  DateTime? @db.Timestamptz
  cancelAtPeriodEnd Boolean   @default(false)
  cancelledAt       DateTime? @db.Timestamptz
  createdAt         DateTime  @default(now()) @db.Timestamptz
  updatedAt         DateTime  @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([paypalId])
  @@index([status])
  @@index([createdAt])
}

// =========================
//    Profil
// =========================
model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String?
  title     String?
  org       String?
  locale    String   @default("fr")
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =========================
//    Historique (journal libre)
// =========================
// Trace conversationnelle / génération de contenu
// inputJson: données d'entrée (paramètres, contexte)
// outputText: rendu généré
model History {
  id          String   @id @default(cuid())
  userId      String
  plan        String
  templateId  String
  inputJson   String
  outputText  String
  createdAt   DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

// =========================
//    Templates (moteur interne)
// =========================
model Template {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  locale    String   @default("fr")
  config    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@index([locale])
  @@index([isActive])
}

// =========================
//    Appareils (multi-device)
// =========================
// isFounder: appareil fondateur (appareil de création de l'espace)
// authorized: état courant
// firstAuthorizedAt: première validation officielle de cet appareil
// revokedAt: révocation ultérieure explicite (ex: téléphone perdu)
// lastSeenAt: suivi sécurité / housekeeping
// Règle Protocole Benmehdi :
//  - l'appareil fondateur est autorisé d'office lors de l'activation initiale
//  - il ne peut pas être révoqué automatiquement par l'ajout d'un nouvel appareil
model Device {
  id                String    @id @default(cuid())
  userId            String
  deviceId          String
  label             String?           // ex: "iPhone 15", "Pixel 8"
  userAgent         String?
  platform          String?           // ex: "iOS", "Android", "Web"
  isFounder         Boolean   @default(false)
  authorized        Boolean   @default(false)
  firstAuthorizedAt DateTime? @db.Timestamptz
  revokedAt         DateTime? @db.Timestamptz
  lastSeenAt        DateTime? @db.Timestamptz
  createdAt         DateTime  @default(now()) @db.Timestamptz
  updatedAt         DateTime  @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([userId, authorized])
  @@index([updatedAt])
  @@index([isFounder])
}

// =========================
//    Sessions opaques (DB)
// =========================
// expiresAt: invalidation automatique
// revokedAt: logout / rotation du token
// deviceId: facultatif (session liée à un appareil précis)
model Session {
  id         String   @id @default(cuid())
  userId     String
  deviceId   String?
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @updatedAt @db.Timestamptz
  expiresAt  DateTime @db.Timestamptz
  revokedAt  DateTime? @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
}

// =========================
//    Intent de paiement "1€" (device)
// =========================
// orderId PayPal unique
// status libre ("CREATED"|"APPROVED"|"CAPTURED"|...)
// payload: JSON brut PayPal pour l’auditabilité
model DeviceOrderIntent {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String
  orderId     String   @unique
  amount      String   @default("1.00")
  currency    String   @default("EUR")
  status      String   @default("CREATED")
  payload     String?
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
  completedAt DateTime? @db.Timestamptz
  cancelledAt DateTime? @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceId])
  @@index([status])
  @@index([createdAt])
}
